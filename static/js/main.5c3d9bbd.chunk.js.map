{"version":3,"sources":["serviceWorker.ts","API/todolists-api.tsx","Redux-store/AppReducer/app-reducer.ts","Helep-functions/error-utils.ts","Redux-store/TodolistReducer/todolist-reducer.ts","Redux-store/TaskReducer/tasks-reducer.ts","Redux-store/Store.ts","Components/AddItemForm.tsx","Components/EditableSpan.tsx","Components/Task.tsx","Components/Todolist.tsx","Components/TodolistsList.tsx","Components/StatusPreloader.tsx","Components/ErrorAlert.tsx","Components/AppWithRedux.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","then","res","data","title","post","todolistId","delete","put","taskId","model","initialState","status","error","setAppStatus","type","setAppError","handlerServerAppError","dispatch","messages","length","handlerServerNetworkError","err","message","todolistReducer","state","action","newTodolist","todolist","filter","todolistEntityStatus","tl","id","map","todolists","t","td","addTodolistAC","removeTodolistAC","changeTitleTodolistAC","changeFilterTodolistAC","setTodolistStatus","taskReducer","newTask","task","todoListId","tasks","stateCopy","copyState","forEach","addTaskAC","removeTaskAC","changeTaskTitleAC","changeTaskStatusAC","rootReducer","combineReducers","app","store","createStore","applyMiddleware","thunkMiddleware","getState","AddItemForm","React","memo","props","console","log","useState","setTitle","setError","addTitle","trim","addItem","replace","TextField","size","className","value","onKeyPress","e","charCode","label","helperText","onChange","currentTarget","disabled","IconButton","onClick","color","AddBox","EditableSpan","editMode","setEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","Task","removeTask","useCallback","changeStatus","changeTaskStatus","checked","Completed","New","changeTaskTitle","key","Checkbox","Delete","Todolist","useDispatch","useEffect","setTasksAC","items","catch","copyTasks","f","JSXTasks","onAllClickHandler","changeTodolistFilter","onActiveClickHandler","onComplitedClickHandler","addTaskForTodolist","addTask","changeTodolistTitle","removeTodolist","entityStatus","Button","variant","TodolistsList","useSelector","resultCode","item","addTaskTC","removeTaskTC","find","description","priority","startDate","deadline","changeTaskStatusTC","ourTask","changeTaskTitleTC","addNewTodolist","addTodolistTC","removeTodolistTC","changeTodolistTitleTC","Container","fixed","Grid","container","style","padding","spacing","allTodolistTasks","Paper","elevation","StatusPreloader","Box","sx","width","LinearProgress","Alert","ref","ErrorAlert","handleClose","event","reason","Stack","Snackbar","open","autoHideDuration","onClose","severity","AppWithRedux","statusPreloader","AppBar","position","Toolbar","edge","aria-label","mr","Typography","component","flexGrow","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5c3d9bbd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'e5b738f6-4744-4b59-9452-509c57fc296b'\r\n    },\r\n});\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type CommonTodolistType<T = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    fieldsErrors: string[]\r\n    data: T\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdatedPropertiesType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type TasksType = {\r\n    items: TaskType[]\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\nexport type CreateTodolistTasksType<T = {}> = {\r\n    data: T\r\n    resultCode: number\r\n    messages: string[]\r\n    fieldsErrors: string[]\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists')\r\n            .then(res => {\r\n                return res.data;\r\n            });\r\n    },\r\n\r\n    createTodolist(title: string) {\r\n        return instance.post<CommonTodolistType<{ item: TodolistType }>>('todo-lists/', {title})\r\n            .then(res => {\r\n                return res.data;\r\n            });\r\n    },\r\n\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<CommonTodolistType>(`todo-lists/${todolistId}`)\r\n            .then(res => {\r\n                return res.data;\r\n            });\r\n    },\r\n\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<CommonTodolistType>(`todo-lists/${todolistId}`, {title})\r\n            .then(res => {\r\n                return res.data;\r\n            });\r\n    },\r\n\r\n    getTodolistTasks(todolistId: string) {\r\n        return instance.get<TasksType>(`todo-lists/${todolistId}/tasks`)\r\n            .then(res => {\r\n                return res.data;\r\n            });\r\n    },\r\n\r\n    createTodolistTask(todolistId: string, title: string) {\r\n        return instance.post<CreateTodolistTasksType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: title})\r\n            .then(res => {\r\n                return res.data;\r\n            });\r\n    },\r\n\r\n    updateTodolistTask(todolistId: string, taskId: string, model: UpdatedPropertiesType) {\r\n        return instance.put<CommonTodolistType>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n            .then(res => {\r\n                return res.data;\r\n            });\r\n    },\r\n\r\n    deleteTodolistTask(todolistId: string, taskId: string) {\r\n        return instance.delete<CommonTodolistType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n            .then(res => {\r\n                return res.data;\r\n            });\r\n    },\r\n};\r\n\r\n","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type AppPreloaderStateType = {\r\n    status: RequestStatusType,\r\n    error: string | null\r\n}\r\n\r\nexport type AppTypes = ReturnType<typeof setAppStatus> |\r\n    ReturnType<typeof setAppError>\r\n\r\nconst initialState: AppPreloaderStateType = {\r\n    status: 'succeeded',\r\n    error: null,\r\n};\r\n\r\nexport const appReducer = (state: AppPreloaderStateType = initialState, action: AppTypes): AppPreloaderStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        case 'APP/SET-ERROR':\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setAppStatus = (status: RequestStatusType) => {\r\n    return {\r\n        type: 'APP/SET-STATUS',\r\n        status,\r\n    } as const;\r\n};\r\n\r\nexport const setAppError = (error: string | null) => {\r\n    return {\r\n        type: 'APP/SET-ERROR',\r\n        error,\r\n    } as const;\r\n};","import {CommonTodolistType, CreateTodolistTasksType} from '../API/todolists-api';\r\nimport {setAppError, setAppStatus} from '../Redux-store/AppReducer/app-reducer';\r\nimport {Dispatch} from 'redux';\r\n\r\nexport const handlerServerAppError = <T>(res: CommonTodolistType<T> | CreateTodolistTasksType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (res.messages.length) {\r\n        dispatch(setAppError(res.messages[0]));\r\n    } else {\r\n        dispatch(setAppError('We have some troubles. Сonnect with technical support'));\r\n    }\r\n    dispatch(setAppStatus('failed'));\r\n};\r\n\r\n\r\nexport const handlerServerNetworkError = <T>(err: { message: string }, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppError(err.message));\r\n    dispatch(setAppStatus('failed'));\r\n};\r\n\r\nexport type ErrorUtilsDispatchType = Dispatch<ReturnType<typeof setAppError>\r\n    | ReturnType<typeof setAppStatus>>\r\n","import {todolistsAPI, TodolistType} from '../../API/todolists-api';\r\nimport {FilterType} from '../../Components/TodolistsList';\r\nimport {Dispatch} from 'redux';\r\nimport {RequestStatusType, setAppError, setAppStatus} from '../AppReducer/app-reducer';\r\nimport {handlerServerAppError, handlerServerNetworkError} from '../../Helep-functions/error-utils';\r\n\r\nexport type AllTodolistTypes = AddTodolistType\r\n    | RemoveTodolistType\r\n    | ChangeTitleTodolistType\r\n    | ChangeFilterTodolistType\r\n    | SetTodolistsType\r\n    | SetTodolistStatusType\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterType\r\n    todolistEntityStatus: RequestStatusType\r\n}\r\n\r\nexport type AddTodolistType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistType = ReturnType<typeof removeTodolistAC>\r\nexport type ChangeTitleTodolistType = ReturnType<typeof changeTitleTodolistAC>\r\nexport type ChangeFilterTodolistType = ReturnType<typeof changeFilterTodolistAC>\r\nexport type SetTodolistsType = ReturnType<typeof setTodolistsAC>\r\nexport type SetTodolistStatusType = ReturnType<typeof setTodolistStatus>\r\n\r\n\r\nconst initialState: TodolistDomainType[] = [];\r\n\r\nexport const todolistReducer = (state: TodolistDomainType[] = initialState, action: AllTodolistTypes): TodolistDomainType[] => {\r\n    switch (action.type) {\r\n        case 'ADD-TODOLIST':\r\n            let newTodolist: TodolistDomainType = {\r\n                ...action.todolist,\r\n                filter: 'All',\r\n                todolistEntityStatus: 'succeeded'\r\n            };\r\n            return [newTodolist, ...state,];\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter((tl) => tl.id !== action.todolistId);\r\n        case 'CHANGE-TITLE-TODOLIST':\r\n            return state.map((tl) => tl.id === action.todolistId ? {...tl, title: action.title} : tl);\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map((tl) => tl.id === action.todolistId ? {...tl, filter: action.filter} : tl);\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(t => {\r\n                    return {\r\n                        ...t,\r\n                        filter: 'All',\r\n                        todolistEntityStatus: 'succeeded',\r\n                    };\r\n                }\r\n            );\r\n        case 'TODO/SET-STATUS':\r\n            return state.map((td) => td.id === action.todolistId\r\n                ? {\r\n                    ...td,\r\n                    todolistEntityStatus: action.todolistEntityStatus\r\n                }\r\n                : td);\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const addTodolistAC = (todolist: TodolistType) => {\r\n    return {\r\n        type: 'ADD-TODOLIST',\r\n        todolist\r\n    } as const;\r\n};\r\n\r\nexport const removeTodolistAC = (todolistId: string) => {\r\n    return {\r\n        type: 'REMOVE-TODOLIST',\r\n        todolistId,\r\n    } as const;\r\n};\r\n\r\nexport const changeTitleTodolistAC = (title: string, todolistId: string) => {\r\n    return {\r\n        type: 'CHANGE-TITLE-TODOLIST',\r\n        todolistId,\r\n        title,\r\n    } as const;\r\n};\r\n\r\nexport const changeFilterTodolistAC = (filter: FilterType, todolistId: string) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-FILTER',\r\n        todolistId,\r\n        filter,\r\n    } as const;\r\n};\r\n\r\nexport const setTodolistsAC = (todolists: TodolistType[]) => {\r\n    return {\r\n        type: 'SET-TODOLISTS',\r\n        todolists\r\n    } as const;\r\n};\r\n\r\nexport const setTodolistStatus = (todolistEntityStatus: RequestStatusType, todolistId: string) => {\r\n    return {\r\n        type: 'TODO/SET-STATUS',\r\n        todolistEntityStatus,\r\n        todolistId,\r\n    } as const;\r\n};\r\n\r\nexport const setTodolistTC = () => {\r\n    return (dispatch: todolistReducerThunkDispatch) => {\r\n        dispatch(setAppStatus('loading'));\r\n        todolistsAPI.getTodolists()\r\n            .then(res => {\r\n                dispatch(setTodolistsAC(res));\r\n                dispatch(setAppStatus('succeeded'));\r\n            })\r\n            .catch(err => {\r\n                // util helper-function\r\n                handlerServerNetworkError(err, dispatch)\r\n            });\r\n    };\r\n};\r\n\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: todolistReducerThunkDispatch) => {\r\n        dispatch(setAppStatus('loading'));\r\n        dispatch(setTodolistStatus('loading', todolistId));\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then(res => {\r\n                dispatch(removeTodolistAC(todolistId));\r\n                dispatch(setAppStatus('succeeded'));\r\n            })\r\n            .catch(err => {\r\n                // util helper-function\r\n                handlerServerNetworkError(err, dispatch)\r\n            });\r\n    };\r\n};\r\n\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: todolistReducerThunkDispatch) => {\r\n        dispatch(setAppStatus('loading'));\r\n        todolistsAPI.createTodolist(title)\r\n            .then(res => {\r\n                if (res.resultCode === 0) {\r\n                    dispatch(addTodolistAC(res.data.item));\r\n                    dispatch(setAppStatus('succeeded'));\r\n                } else {\r\n                    // util helper-function\r\n                    handlerServerAppError(res, dispatch);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                // util helper-function\r\n                handlerServerNetworkError(err, dispatch)\r\n            });\r\n    };\r\n};\r\n\r\nexport const changeTodolistTitleTC = (title: string, todolistId: string) => {\r\n    return (dispatch: todolistReducerThunkDispatch) => {\r\n        dispatch(setAppStatus('loading'));\r\n        todolistsAPI.updateTodolist(todolistId, title)\r\n            .then(res => {\r\n                if (res.resultCode === 0) {\r\n                    dispatch(changeTitleTodolistAC(title, todolistId));\r\n                    dispatch(setAppStatus('succeeded'));\r\n                } else {\r\n                    // util helper-function\r\n                    handlerServerAppError(res, dispatch);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                // util helper-function\r\n                handlerServerNetworkError(err, dispatch)\r\n            });\r\n    };\r\n};\r\n\r\n\r\nexport type todolistReducerThunkDispatch = Dispatch<AllTodolistTypes\r\n    | ReturnType<typeof setAppStatus>\r\n    | ReturnType<typeof setAppError>>","import {\r\n    AddTodolistType,\r\n    RemoveTodolistType,\r\n    setTodolistStatus,\r\n    SetTodolistsType\r\n} from '../TodolistReducer/todolist-reducer';\r\nimport {TasksType} from '../../Components/TodolistsList';\r\nimport {TaskStatuses, TaskType, todolistsAPI} from '../../API/todolists-api';\r\nimport {Dispatch} from 'redux';\r\nimport {AppRootStateType} from '../Store';\r\nimport {setAppError, setAppStatus} from '../AppReducer/app-reducer';\r\nimport {handlerServerAppError, handlerServerNetworkError} from '../../Helep-functions/error-utils';\r\n\r\nexport type AllTasksTypes = AddTaskType\r\n    | RemoveTaskType\r\n    | ChangeTaskTitleType\r\n    | ChangeTaskStatusType\r\n    | AddTodolistType\r\n    | RemoveTodolistType\r\n    | SetTodolistsType\r\n    | SetTasksType\r\n\r\nexport type AddTaskType = ReturnType<typeof addTaskAC>\r\nexport type RemoveTaskType = ReturnType<typeof removeTaskAC>\r\nexport type ChangeTaskTitleType = ReturnType<typeof changeTaskTitleAC>\r\nexport type ChangeTaskStatusType = ReturnType<typeof changeTaskStatusAC>\r\nexport type SetTasksType = ReturnType<typeof setTasksAC>\r\n\r\nconst initialState: TasksType = {};\r\n\r\nexport const taskReducer = (state: TasksType = initialState, action: AllTasksTypes): TasksType => {\r\n    switch (action.type) {\r\n        case 'ADD-TASK':\r\n            const newTask: TaskType = {...action.task};\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [newTask, ...state[action.task.todoListId],]\r\n            };\r\n\r\n        case 'REMOVE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].filter(taskId => taskId.id !== action.taskId)\r\n            };\r\n\r\n        case 'CHANGE-TASK-TITLE':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id !== action.taskId ? t : {\r\n                    ...t,\r\n                    title: action.title\r\n                })\r\n            };\r\n\r\n        case 'CHANGE-TASK-STATUS':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id !== action.taskId ? t : {\r\n                    ...t,\r\n                    status: action.status\r\n                })\r\n            };\r\n        case 'SET-TASKS':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: action.tasks\r\n            };\r\n\r\n\r\n        case 'ADD-TODOLIST':\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            };\r\n\r\n        case 'REMOVE-TODOLIST':\r\n            let stateCopy = {...state};\r\n            delete stateCopy[action.todolistId];\r\n            return stateCopy;\r\n\r\n        case 'SET-TODOLISTS':\r\n            const copyState = {...state};\r\n\r\n            action.todolists.forEach(t => {\r\n                copyState[t.id] = [];\r\n            });\r\n\r\n            return copyState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const addTaskAC = (task: TaskType) => {\r\n    return {\r\n        type: 'ADD-TASK',\r\n        task\r\n    } as const;\r\n};\r\n\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        taskId,\r\n        todolistId,\r\n    } as const;\r\n};\r\n\r\nexport const changeTaskTitleAC = (title: string, todolistId: string, taskId: string) => {\r\n    return {\r\n        type: 'CHANGE-TASK-TITLE',\r\n        taskId,\r\n        todolistId,\r\n        title\r\n    } as const;\r\n};\r\n\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string,) => {\r\n    return {\r\n        type: 'CHANGE-TASK-STATUS',\r\n        taskId,\r\n        todolistId,\r\n        status,\r\n    } as const;\r\n};\r\n\r\nexport const setTasksAC = (tasks: TaskType[], todolistId: string) => {\r\n    return {\r\n        type: 'SET-TASKS',\r\n        tasks,\r\n        todolistId,\r\n    } as const;\r\n};\r\n\r\n\r\nexport const setTaskTC = (todolistId: string) => {\r\n    return (dispatch: taskReducerThunkDispatch) => {\r\n        dispatch(setAppStatus('loading'));\r\n        todolistsAPI.getTodolistTasks(todolistId)\r\n            .then(res => {\r\n                dispatch(setTasksAC(res.items, todolistId));\r\n                dispatch(setAppStatus('succeeded'));\r\n            })\r\n            .catch(err => {\r\n                // util helper-function\r\n                handlerServerNetworkError(err, dispatch)\r\n            });\r\n    };\r\n};\r\n\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => {\r\n    return (dispatch: taskReducerThunkDispatch) => {\r\n        dispatch(setAppStatus('loading'));\r\n        todolistsAPI.deleteTodolistTask(todolistId, taskId)\r\n            .then(res => {\r\n                dispatch(removeTaskAC(taskId, todolistId));\r\n                dispatch(setAppStatus('succeeded'));\r\n            })\r\n            .catch(err => {\r\n                // util helper-function\r\n                handlerServerNetworkError(err, dispatch)\r\n            });\r\n    };\r\n};\r\n\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) => {\r\n    return (dispatch: taskReducerThunkDispatch) => {\r\n        dispatch(setAppStatus('loading'));\r\n        todolistsAPI.createTodolistTask(todolistId, title)\r\n            .then(res => {\r\n                if (res.resultCode === 0) {\r\n                    dispatch(addTaskAC(res.data.item));\r\n                    dispatch(setAppStatus('succeeded'));\r\n                    dispatch(setTodolistStatus('succeeded', todolistId));\r\n                } else {\r\n                    // util helper-function\r\n                    handlerServerAppError(res, dispatch);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                // util helper-function\r\n                handlerServerNetworkError(err, dispatch)\r\n            });\r\n    };\r\n};\r\n\r\n\r\nexport const changeTaskStatusTC = (taskId: string, status: TaskStatuses, todolistId: string) => {\r\n    return (dispatch: taskReducerThunkDispatch, getState: () => AppRootStateType) => {\r\n        const allTasks = getState().tasks;\r\n        const task = allTasks[todolistId].find((t) => t.id === taskId);\r\n        if (task) {\r\n            dispatch(setAppStatus('loading'));\r\n            todolistsAPI.updateTodolistTask(todolistId, taskId, {\r\n                title: task.title,\r\n                description: task.description,\r\n                status,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                deadline: task.deadline,\r\n            })\r\n                .then(res => {\r\n                    dispatch(changeTaskStatusAC(taskId, status, todolistId));\r\n                    dispatch(setAppStatus('succeeded'));\r\n                })\r\n                .catch(err => {\r\n                    // util helper-function\r\n                    handlerServerNetworkError(err, dispatch)\r\n                });\r\n        }\r\n    };\r\n};\r\n\r\nexport const changeTaskTitleTC = (title: string, taskId: string, todolistId: string) => {\r\n    return (dispatch: taskReducerThunkDispatch, getState: () => AppRootStateType) => {\r\n        const allTasks = getState().tasks;\r\n        const task = allTasks[todolistId];\r\n        const ourTask = task.find((t) => {\r\n            if (t.id === taskId) {\r\n                return t;\r\n            }\r\n        });\r\n        if (ourTask) {\r\n            dispatch(setAppStatus('loading'));\r\n            todolistsAPI.updateTodolistTask(todolistId, taskId, {\r\n                title,\r\n                description: ourTask.description,\r\n                status: ourTask.status,\r\n                priority: ourTask.priority,\r\n                startDate: ourTask.startDate,\r\n                deadline: ourTask.deadline,\r\n            })\r\n                .then(res => {\r\n                    debugger\r\n                    if (res.resultCode === 0) {\r\n                        dispatch(changeTaskTitleAC(title, todolistId, taskId));\r\n                        dispatch(setAppStatus('succeeded'));\r\n                    } else {\r\n                        // util helper-function\r\n                        handlerServerAppError(res, dispatch);\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    // util helper-function\r\n                    handlerServerNetworkError(err, dispatch)\r\n                });\r\n        }\r\n    };\r\n};\r\n\r\nexport type taskReducerThunkDispatch = Dispatch<AllTasksTypes\r\n    | ReturnType<typeof setAppStatus>\r\n    | ReturnType<typeof setAppError>\r\n    | ReturnType<typeof setTodolistStatus>>","import {combineReducers, createStore, applyMiddleware} from 'redux';\r\nimport {taskReducer} from './TaskReducer/tasks-reducer';\r\nimport {todolistReducer} from './TodolistReducer/todolist-reducer';\r\nimport {appReducer} from './AppReducer/app-reducer';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todolists: todolistReducer,\r\n    app: appReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store.getState()\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport TextField from '@mui/material/TextField';\r\nimport {AddBox} from '@mui/icons-material';\r\n\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    console.log('AddItemForm is called');\r\n\r\n    let [title, setTitle] = useState<string>('');\r\n    let [error, setError] = useState<string | null>(null);\r\n\r\n    const addTitle = () => {\r\n        if (title.trim()) {\r\n            props.addItem(title.trim().replace(/\\s+/g, ' '));\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    };\r\n\r\n    const changeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n        setError(null);\r\n    };\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            addTitle();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                size=\"small\"\r\n                className={error ? 'error' : ''}\r\n                value={title}\r\n                onKeyPress={onKeyPressHandler}\r\n                label={'Title'}\r\n                error={!!error}\r\n                helperText={error}\r\n                onChange={changeHandler}\r\n                disabled={props.disabled}/>\r\n\r\n            <IconButton\r\n                onClick={addTitle}\r\n                color=\"primary\"\r\n                disabled={props.disabled}\r\n            >\r\n                <AddBox/>\r\n            </IconButton>\r\n\r\n            {/*{error && <div className={'error-message'}>Title is required</div>}*/}\r\n        </div>\r\n    );\r\n});","import TextField from '@mui/material/TextField/TextField';\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log('Editable span is called')\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [title, setTitle] = useState(props.title)\r\n\r\n    const OnEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const OffEditMode = () => {\r\n        // regular expression\r\n        setTitle(title.trim().replace(/\\s+/g, ' '))\r\n        props.changeTitle(title)\r\n        setEditMode(false)\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            setTitle(title.trim().replace(/\\s+/g, ' '))\r\n            props.changeTitle(title)\r\n            setEditMode(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <span>\r\n                {editMode\r\n                    ? <TextField\r\n                        onKeyPress={onKeyPressHandler}\r\n                        onChange={changeTitle}\r\n                        autoFocus={true}\r\n                        onBlur={OffEditMode}\r\n                        value={title}/>\r\n                    : <span\r\n                        onDoubleClick={OnEditMode}> {props.title} </span>\r\n                }\r\n            </span>\r\n        </>\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {TaskStatuses, TaskType} from '../API/todolists-api';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {Delete} from '@mui/icons-material';\r\nimport Checkbox from '@mui/material/Checkbox';\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (title: string, todolistId: string, taskId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const removeTask = useCallback(() => {\r\n        props.removeTask(props.task.id, props.todolistId);\r\n    }, [props.removeTask, props.task.id, props.todolistId]);\r\n\r\n    const changeStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.task.id,\r\n            e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New,\r\n            props.todolistId);\r\n    }, [props.changeTaskStatus, props.task.id, props.todolistId]);\r\n\r\n    const changeTaskTitle = useCallback((title: string) => {\r\n        props.changeTaskTitle(title, props.todolistId, props.task.id);\r\n    }, [props.changeTaskTitle, props.todolistId, props.task.id]);\r\n\r\n    return (\r\n        <div\r\n            key={props.task.id}\r\n            className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n            <Checkbox\r\n                color=\"primary\"\r\n                checked={props.task.status === TaskStatuses.Completed}\r\n                onChange={changeStatus}/>\r\n            <EditableSpan title={props.task.title} changeTitle={changeTaskTitle}/>\r\n            <IconButton onClick={removeTask}>\r\n                <Delete/>\r\n            </IconButton>\r\n\r\n        </div>\r\n    );\r\n});","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Task} from './Task';\r\nimport {FilterType} from './TodolistsList';\r\nimport {TaskStatuses, TaskType} from '../API/todolists-api';\r\nimport {useDispatch} from 'react-redux';\r\nimport {setTaskTC} from '../Redux-store/TaskReducer/tasks-reducer';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {RequestStatusType} from '../Redux-store/AppReducer/app-reducer';\r\n\r\ntype TodolistPropsType = {\r\n    entityStatus: RequestStatusType\r\n    todolistId: string\r\n    title: string\r\n    tasks: TaskType[]\r\n    filter: FilterType\r\n    addTask: (title: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (title: string, todolistId: string, taskId: string) => void\r\n    changeTodolistFilter: (filter: FilterType, todolistId: string) => void\r\n    changeTodolistTitle: (title: string, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n}\r\n\r\n\r\nexport const Todolist = React.memo((props: TodolistPropsType) => {\r\n    console.log('Todolist is called');\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(setTaskTC(props.todolistId));\r\n    }, []);\r\n\r\n    let copyTasks = props.tasks;\r\n    if (props.filter === 'Active') {\r\n        copyTasks = props.tasks.filter(f => f.status === TaskStatuses.New);\r\n    }\r\n\r\n    if (props.filter === 'Completed') {\r\n        copyTasks = props.tasks.filter(f => f.status === TaskStatuses.Completed);\r\n    }\r\n    const JSXTasks = copyTasks.map(t => <Task\r\n        key={t.id}\r\n        task={t}\r\n        todolistId={props.todolistId}\r\n        removeTask={props.removeTask}\r\n        changeTaskStatus={props.changeTaskStatus}\r\n        changeTaskTitle={props.changeTaskTitle}/>);\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        props.changeTodolistFilter('All', props.todolistId);\r\n    }, [props.changeTodolistFilter, props.todolistId]);\r\n\r\n    const onActiveClickHandler = useCallback(() => {\r\n        props.changeTodolistFilter('Active', props.todolistId);\r\n    }, [props.changeTodolistFilter, props.todolistId]);\r\n\r\n    const onComplitedClickHandler = useCallback(() => {\r\n        props.changeTodolistFilter('Completed', props.todolistId);\r\n    }, [props.changeTodolistFilter, props.todolistId]);\r\n\r\n    const addTaskForTodolist = useCallback((title: string) => {\r\n        props.addTask(title, props.todolistId);\r\n    }, [props.addTask, props.todolistId]);\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(title, props.todolistId);\r\n    }, [props.changeTodolistTitle, props.todolistId]);\r\n\r\n    const removeTodolist = (todolistId: string) => {\r\n        props.removeTodolist(todolistId);\r\n    };\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} changeTitle={changeTodolistTitle}/>\r\n                <IconButton onClick={() => removeTodolist(props.todolistId)} disabled={props.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTaskForTodolist} disabled={props.entityStatus === 'loading'}/>\r\n            <div>\r\n                {JSXTasks}\r\n            </div>\r\n            <div>\r\n                <Button\r\n                    color=\"inherit\"\r\n                    variant={props.filter === 'All' ? 'outlined' : 'text'}\r\n                    disabled={props.entityStatus === 'loading'}\r\n                    onClick={onAllClickHandler}>All\r\n\r\n                </Button>\r\n                <Button\r\n                    color=\"primary\"\r\n                    variant={props.filter === 'Active' ? 'outlined' : 'text'}\r\n                    disabled={props.entityStatus === 'loading'}\r\n                    onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button\r\n                    color=\"error\"\r\n                    variant={props.filter === 'Completed' ? 'outlined' : 'text'}\r\n                    disabled={props.entityStatus === 'loading'}\r\n                    onClick={onComplitedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport '../App.css';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {\r\n    addTodolistTC,\r\n    changeFilterTodolistAC,\r\n    changeTodolistTitleTC,\r\n    removeTodolistTC,\r\n    setTodolistTC,\r\n    TodolistDomainType\r\n} from '../Redux-store/TodolistReducer/todolist-reducer';\r\nimport {addTaskTC, changeTaskStatusTC, changeTaskTitleTC, removeTaskTC} from '../Redux-store/TaskReducer/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../Redux-store/Store';\r\nimport {TaskStatuses, TaskType} from '../API/todolists-api';\r\nimport {Todolist} from './Todolist';\r\nimport {AppWithReducers} from '../Evolution-components/AppWithReducers';\r\nimport Container from '@mui/material/Container/Container';\r\nimport {Grid, Paper} from '@mui/material';\r\n\r\n// что бы после рефакторинга не падали там ошибки\r\nconst AppWithReducersComponent = AppWithReducers;\r\n\r\nexport type TasksType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nexport type FilterType = 'All' | 'Active' | 'Completed'\r\n\r\n\r\nexport const TodolistsList = () => {\r\n    console.log('TodolistsList is called');\r\n\r\n\r\n    let todolists = useSelector<AppRootStateType, TodolistDomainType[]>((state) => state.todolists);\r\n    let tasks = useSelector<AppRootStateType, TasksType>((state) => state.tasks);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(setTodolistTC());\r\n    }, []);\r\n\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskTC(title, todolistId));\r\n    }, [dispatch]);\r\n\r\n    const removeTask = useCallback((taskId: string, todolistId: string) => {\r\n        dispatch(removeTaskTC(taskId, todolistId));\r\n    }, [dispatch]);\r\n\r\n    const changeStatus = useCallback((taskId: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(changeTaskStatusTC(taskId, status, todolistId));\r\n    }, [dispatch]);\r\n\r\n    const changeTaskTitle = useCallback((title: string, todolistId: string, taskId: string) => {\r\n        dispatch(changeTaskTitleTC(title, taskId, todolistId));\r\n    }, [dispatch]);\r\n\r\n    const addNewTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title));\r\n    }, [dispatch]);\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodolistTC(todolistId));\r\n    }, [dispatch]);\r\n\r\n    const changeTodolistFilter = useCallback((filter: FilterType, todolistId: string) => {\r\n        dispatch(changeFilterTodolistAC(filter, todolistId));\r\n    }, [dispatch]);\r\n\r\n    const changeTodolistTitle = useCallback((title: string, todolistId: string) => {\r\n        // dispatch(changeTitleTodolistAC(title, todolistId));\r\n        dispatch(changeTodolistTitleTC(title, todolistId));\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <AddItemForm addItem={addNewTodolist} disabled={false}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todolists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id];\r\n\r\n                        return (\r\n                            <Grid item>\r\n                                <Paper\r\n                                    elevation={3}\r\n                                    style={{padding: '10px'}}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        todolistId={tl.id}\r\n                                        title={tl.title}\r\n                                        filter={tl.filter}\r\n                                        entityStatus={tl.todolistEntityStatus}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                        removeTask={removeTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        changeTodolistFilter={changeTodolistFilter}\r\n                                        addTask={addTask}/>\r\n                                </Paper>\r\n                            </Grid>\r\n                        );\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n\r\n        </div>\r\n    );\r\n};","import * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\n\r\nexport function StatusPreloader() {\r\n    return (\r\n        <Box sx={{ width: '100%' }}>\r\n            <LinearProgress />\r\n        </Box>\r\n    );\r\n}","import * as React from 'react';\r\nimport {useState} from 'react';\r\nimport Stack from '@mui/material/Stack';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../Redux-store/Store';\r\nimport { setAppError } from '../Redux-store/AppReducer/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorAlert() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppError(null));\r\n    };\r\n\r\n    return (\r\n        <Stack spacing={2} sx={{width: '100%'}}>\r\n            <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n        </Stack>\r\n    );\r\n}","import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport {TodolistsList} from './TodolistsList';\r\nimport {StatusPreloader} from './StatusPreloader';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../Redux-store/Store';\r\nimport {RequestStatusType} from '../Redux-store/AppReducer/app-reducer';\r\nimport { ErrorAlert } from './ErrorAlert';\r\n\r\nexport function AppWithRedux() {\r\n\r\n    const statusPreloader = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorAlert/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{mr: 2}}\r\n                    >\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {statusPreloader === 'loading' && <StatusPreloader/>}\r\n            <TodolistsList/>\r\n\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './Redux-store/Store';\r\nimport {AppWithRedux} from './Components/AppWithRedux';\r\n\r\n\r\n// import {createTheme, ThemeProvider} from \"@material-ui/core\";\r\n\r\n// const theme = createTheme();\r\n\r\nReactDOM.render(<Provider store={store}>\r\n        {/*<ThemeProvider theme={theme}>{<AppWithRedux/>}*/}\r\n        {/*</ThemeProvider>;*/}\r\n        <AppWithRedux/>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}